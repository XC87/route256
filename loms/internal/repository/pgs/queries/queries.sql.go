// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
insert into orders (created_at, updated_at, user_id, status) values ($1,$2, $3, $4) returning id
`

type CreateOrderParams struct {
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	UserID    int64            `json:"user_id"`
	Status    int32            `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.Status,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createOrderItems = `-- name: CreateOrderItems :exec
insert into order_items (order_id, sku, count) values ($1, $2, $3)
`

type CreateOrderItemsParams struct {
	OrderID int64 `json:"order_id"`
	Sku     int64 `json:"sku"`
	Count   int64 `json:"count"`
}

func (q *Queries) CreateOrderItems(ctx context.Context, arg CreateOrderItemsParams) error {
	_, err := q.db.Exec(ctx, createOrderItems, arg.OrderID, arg.Sku, arg.Count)
	return err
}

const getBySku = `-- name: GetBySku :one
select count, reserved from stocks where sku = $1
`

type GetBySkuRow struct {
	Count    int64 `json:"count"`
	Reserved int64 `json:"reserved"`
}

func (q *Queries) GetBySku(ctx context.Context, sku int64) (GetBySkuRow, error) {
	row := q.db.QueryRow(ctx, getBySku, sku)
	var i GetBySkuRow
	err := row.Scan(&i.Count, &i.Reserved)
	return i, err
}

const getOrderById = `-- name: GetOrderById :many
select o.id, o.created_at, o.updated_at, o.user_id, o.status, oi.id, oi.order_id, oi.sku, oi.count from orders o
    left join order_items oi on o.id = oi.order_id
where o.id = $1
`

type GetOrderByIdRow struct {
	Order     Order     `json:"order"`
	OrderItem OrderItem `json:"order_item"`
}

func (q *Queries) GetOrderById(ctx context.Context, id int64) ([]GetOrderByIdRow, error) {
	rows, err := q.db.Query(ctx, getOrderById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderByIdRow
	for rows.Next() {
		var i GetOrderByIdRow
		if err := rows.Scan(
			&i.Order.ID,
			&i.Order.CreatedAt,
			&i.Order.UpdatedAt,
			&i.Order.UserID,
			&i.Order.Status,
			&i.OrderItem.ID,
			&i.OrderItem.OrderID,
			&i.OrderItem.Sku,
			&i.OrderItem.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCountBySku = `-- name: UpdateCountBySku :execresult
update stocks set count = count + $1 where sku = $2 returning id
`

type UpdateCountBySkuParams struct {
	Count int64 `json:"count"`
	Sku   int64 `json:"sku"`
}

func (q *Queries) UpdateCountBySku(ctx context.Context, arg UpdateCountBySkuParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateCountBySku, arg.Count, arg.Sku)
}

const updateOrder = `-- name: UpdateOrder :exec
update orders set status = $1, user_id = $2, created_at = $3, updated_at = $4 where id = $5
`

type UpdateOrderParams struct {
	Status    int32            `json:"status"`
	UserID    int64            `json:"user_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	ID        int64            `json:"id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder,
		arg.Status,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
update orders set status = $1 where id = $2
`

type UpdateOrderStatusParams struct {
	Status int32 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}

const updateReserveBySku = `-- name: UpdateReserveBySku :execresult
update stocks set reserved = reserved + $1 where sku = $2 returning id
`

type UpdateReserveBySkuParams struct {
	Reserved int64 `json:"reserved"`
	Sku      int64 `json:"sku"`
}

func (q *Queries) UpdateReserveBySku(ctx context.Context, arg UpdateReserveBySkuParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateReserveBySku, arg.Reserved, arg.Sku)
}
