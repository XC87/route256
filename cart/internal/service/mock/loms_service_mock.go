// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mock

//go:generate minimock -i route256.ozon.ru/project/cart/internal/service.LomsService -o loms_service_mock.go -n LomsServiceMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"route256.ozon.ru/project/cart/internal/domain"
)

// LomsServiceMock implements service.LomsService
type LomsServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateOrder          func(ctx context.Context, userId int64, items []domain.Item) (i1 int64, err error)
	inspectFuncCreateOrder   func(ctx context.Context, userId int64, items []domain.Item)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mLomsServiceMockCreateOrder

	funcGetStockInfo          func(ctx context.Context, sku uint32) (u1 uint64, err error)
	inspectFuncGetStockInfo   func(ctx context.Context, sku uint32)
	afterGetStockInfoCounter  uint64
	beforeGetStockInfoCounter uint64
	GetStockInfoMock          mLomsServiceMockGetStockInfo
}

// NewLomsServiceMock returns a mock for service.LomsService
func NewLomsServiceMock(t minimock.Tester) *LomsServiceMock {
	m := &LomsServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mLomsServiceMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*LomsServiceMockCreateOrderParams{}

	m.GetStockInfoMock = mLomsServiceMockGetStockInfo{mock: m}
	m.GetStockInfoMock.callArgs = []*LomsServiceMockGetStockInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsServiceMockCreateOrder struct {
	mock               *LomsServiceMock
	defaultExpectation *LomsServiceMockCreateOrderExpectation
	expectations       []*LomsServiceMockCreateOrderExpectation

	callArgs []*LomsServiceMockCreateOrderParams
	mutex    sync.RWMutex
}

// LomsServiceMockCreateOrderExpectation specifies expectation struct of the LomsService.CreateOrder
type LomsServiceMockCreateOrderExpectation struct {
	mock    *LomsServiceMock
	params  *LomsServiceMockCreateOrderParams
	results *LomsServiceMockCreateOrderResults
	Counter uint64
}

// LomsServiceMockCreateOrderParams contains parameters of the LomsService.CreateOrder
type LomsServiceMockCreateOrderParams struct {
	ctx    context.Context
	userId int64
	items  []domain.Item
}

// LomsServiceMockCreateOrderResults contains results of the LomsService.CreateOrder
type LomsServiceMockCreateOrderResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Expect(ctx context.Context, userId int64, items []domain.Item) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	mmCreateOrder.defaultExpectation.params = &LomsServiceMockCreateOrderParams{ctx, userId, items}
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Inspect(f func(ctx context.Context, userId int64, items []domain.Item)) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for LomsServiceMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Return(i1 int64, err error) *LomsServiceMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &LomsServiceMockCreateOrderResults{i1, err}
	return mmCreateOrder.mock
}

// Set uses given function f to mock the LomsService.CreateOrder method
func (mmCreateOrder *mLomsServiceMockCreateOrder) Set(f func(ctx context.Context, userId int64, items []domain.Item) (i1 int64, err error)) *LomsServiceMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the LomsService.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the LomsService.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	return mmCreateOrder.mock
}

// When sets expectation for the LomsService.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mLomsServiceMockCreateOrder) When(ctx context.Context, userId int64, items []domain.Item) *LomsServiceMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	expectation := &LomsServiceMockCreateOrderExpectation{
		mock:   mmCreateOrder.mock,
		params: &LomsServiceMockCreateOrderParams{ctx, userId, items},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up LomsService.CreateOrder return parameters for the expectation previously defined by the When method
func (e *LomsServiceMockCreateOrderExpectation) Then(i1 int64, err error) *LomsServiceMock {
	e.results = &LomsServiceMockCreateOrderResults{i1, err}
	return e.mock
}

// CreateOrder implements service.LomsService
func (mmCreateOrder *LomsServiceMock) CreateOrder(ctx context.Context, userId int64, items []domain.Item) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(ctx, userId, items)
	}

	mm_params := LomsServiceMockCreateOrderParams{ctx, userId, items}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, &mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_got := LomsServiceMockCreateOrderParams{ctx, userId, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the LomsServiceMock.CreateOrder")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(ctx, userId, items)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to LomsServiceMock.CreateOrder. %v %v %v", ctx, userId, items)
	return
}

// CreateOrderAfterCounter returns a count of finished LomsServiceMock.CreateOrder invocations
func (mmCreateOrder *LomsServiceMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of LomsServiceMock.CreateOrder invocations
func (mmCreateOrder *LomsServiceMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mLomsServiceMockCreateOrder) Calls() []*LomsServiceMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*LomsServiceMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *LomsServiceMock) MinimockCreateOrderDone() bool {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *LomsServiceMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsServiceMock.CreateOrder")
		} else {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder with params: %#v", *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && mm_atomic.LoadUint64(&m.afterCreateOrderCounter) < 1 {
		m.t.Error("Expected call to LomsServiceMock.CreateOrder")
	}
}

type mLomsServiceMockGetStockInfo struct {
	mock               *LomsServiceMock
	defaultExpectation *LomsServiceMockGetStockInfoExpectation
	expectations       []*LomsServiceMockGetStockInfoExpectation

	callArgs []*LomsServiceMockGetStockInfoParams
	mutex    sync.RWMutex
}

// LomsServiceMockGetStockInfoExpectation specifies expectation struct of the LomsService.GetStockInfo
type LomsServiceMockGetStockInfoExpectation struct {
	mock    *LomsServiceMock
	params  *LomsServiceMockGetStockInfoParams
	results *LomsServiceMockGetStockInfoResults
	Counter uint64
}

// LomsServiceMockGetStockInfoParams contains parameters of the LomsService.GetStockInfo
type LomsServiceMockGetStockInfoParams struct {
	ctx context.Context
	sku uint32
}

// LomsServiceMockGetStockInfoResults contains results of the LomsService.GetStockInfo
type LomsServiceMockGetStockInfoResults struct {
	u1  uint64
	err error
}

// Expect sets up expected params for LomsService.GetStockInfo
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Expect(ctx context.Context, sku uint32) *mLomsServiceMockGetStockInfo {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsServiceMockGetStockInfoExpectation{}
	}

	mmGetStockInfo.defaultExpectation.params = &LomsServiceMockGetStockInfoParams{ctx, sku}
	for _, e := range mmGetStockInfo.expectations {
		if minimock.Equal(e.params, mmGetStockInfo.defaultExpectation.params) {
			mmGetStockInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStockInfo.defaultExpectation.params)
		}
	}

	return mmGetStockInfo
}

// Inspect accepts an inspector function that has same arguments as the LomsService.GetStockInfo
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Inspect(f func(ctx context.Context, sku uint32)) *mLomsServiceMockGetStockInfo {
	if mmGetStockInfo.mock.inspectFuncGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("Inspect function is already set for LomsServiceMock.GetStockInfo")
	}

	mmGetStockInfo.mock.inspectFuncGetStockInfo = f

	return mmGetStockInfo
}

// Return sets up results that will be returned by LomsService.GetStockInfo
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Return(u1 uint64, err error) *LomsServiceMock {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Set")
	}

	if mmGetStockInfo.defaultExpectation == nil {
		mmGetStockInfo.defaultExpectation = &LomsServiceMockGetStockInfoExpectation{mock: mmGetStockInfo.mock}
	}
	mmGetStockInfo.defaultExpectation.results = &LomsServiceMockGetStockInfoResults{u1, err}
	return mmGetStockInfo.mock
}

// Set uses given function f to mock the LomsService.GetStockInfo method
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Set(f func(ctx context.Context, sku uint32) (u1 uint64, err error)) *LomsServiceMock {
	if mmGetStockInfo.defaultExpectation != nil {
		mmGetStockInfo.mock.t.Fatalf("Default expectation is already set for the LomsService.GetStockInfo method")
	}

	if len(mmGetStockInfo.expectations) > 0 {
		mmGetStockInfo.mock.t.Fatalf("Some expectations are already set for the LomsService.GetStockInfo method")
	}

	mmGetStockInfo.mock.funcGetStockInfo = f
	return mmGetStockInfo.mock
}

// When sets expectation for the LomsService.GetStockInfo which will trigger the result defined by the following
// Then helper
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) When(ctx context.Context, sku uint32) *LomsServiceMockGetStockInfoExpectation {
	if mmGetStockInfo.mock.funcGetStockInfo != nil {
		mmGetStockInfo.mock.t.Fatalf("LomsServiceMock.GetStockInfo mock is already set by Set")
	}

	expectation := &LomsServiceMockGetStockInfoExpectation{
		mock:   mmGetStockInfo.mock,
		params: &LomsServiceMockGetStockInfoParams{ctx, sku},
	}
	mmGetStockInfo.expectations = append(mmGetStockInfo.expectations, expectation)
	return expectation
}

// Then sets up LomsService.GetStockInfo return parameters for the expectation previously defined by the When method
func (e *LomsServiceMockGetStockInfoExpectation) Then(u1 uint64, err error) *LomsServiceMock {
	e.results = &LomsServiceMockGetStockInfoResults{u1, err}
	return e.mock
}

// GetStockInfo implements service.LomsService
func (mmGetStockInfo *LomsServiceMock) GetStockInfo(ctx context.Context, sku uint32) (u1 uint64, err error) {
	mm_atomic.AddUint64(&mmGetStockInfo.beforeGetStockInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStockInfo.afterGetStockInfoCounter, 1)

	if mmGetStockInfo.inspectFuncGetStockInfo != nil {
		mmGetStockInfo.inspectFuncGetStockInfo(ctx, sku)
	}

	mm_params := LomsServiceMockGetStockInfoParams{ctx, sku}

	// Record call args
	mmGetStockInfo.GetStockInfoMock.mutex.Lock()
	mmGetStockInfo.GetStockInfoMock.callArgs = append(mmGetStockInfo.GetStockInfoMock.callArgs, &mm_params)
	mmGetStockInfo.GetStockInfoMock.mutex.Unlock()

	for _, e := range mmGetStockInfo.GetStockInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmGetStockInfo.GetStockInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStockInfo.GetStockInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStockInfo.GetStockInfoMock.defaultExpectation.params
		mm_got := LomsServiceMockGetStockInfoParams{ctx, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStockInfo.t.Errorf("LomsServiceMock.GetStockInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStockInfo.GetStockInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStockInfo.t.Fatal("No results are set for the LomsServiceMock.GetStockInfo")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmGetStockInfo.funcGetStockInfo != nil {
		return mmGetStockInfo.funcGetStockInfo(ctx, sku)
	}
	mmGetStockInfo.t.Fatalf("Unexpected call to LomsServiceMock.GetStockInfo. %v %v", ctx, sku)
	return
}

// GetStockInfoAfterCounter returns a count of finished LomsServiceMock.GetStockInfo invocations
func (mmGetStockInfo *LomsServiceMock) GetStockInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockInfo.afterGetStockInfoCounter)
}

// GetStockInfoBeforeCounter returns a count of LomsServiceMock.GetStockInfo invocations
func (mmGetStockInfo *LomsServiceMock) GetStockInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockInfo.beforeGetStockInfoCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceMock.GetStockInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStockInfo *mLomsServiceMockGetStockInfo) Calls() []*LomsServiceMockGetStockInfoParams {
	mmGetStockInfo.mutex.RLock()

	argCopy := make([]*LomsServiceMockGetStockInfoParams, len(mmGetStockInfo.callArgs))
	copy(argCopy, mmGetStockInfo.callArgs)

	mmGetStockInfo.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockInfoDone returns true if the count of the GetStockInfo invocations corresponds
// the number of defined expectations
func (m *LomsServiceMock) MinimockGetStockInfoDone() bool {
	for _, e := range m.GetStockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStockInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockInfo != nil && mm_atomic.LoadUint64(&m.afterGetStockInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStockInfoInspect logs each unmet expectation
func (m *LomsServiceMock) MinimockGetStockInfoInspect() {
	for _, e := range m.GetStockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceMock.GetStockInfo with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStockInfoCounter) < 1 {
		if m.GetStockInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LomsServiceMock.GetStockInfo")
		} else {
			m.t.Errorf("Expected call to LomsServiceMock.GetStockInfo with params: %#v", *m.GetStockInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockInfo != nil && mm_atomic.LoadUint64(&m.afterGetStockInfoCounter) < 1 {
		m.t.Error("Expected call to LomsServiceMock.GetStockInfo")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateOrderInspect()

			m.MinimockGetStockInfoInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone() &&
		m.MinimockGetStockInfoDone()
}
